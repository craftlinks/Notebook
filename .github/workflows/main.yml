name: Auto-label new issues with LLM

on:
  issues:
    types: [opened, reopened]

jobs:
  labeler:
    runs-on: ubuntu-latest

    # Required so the job can write labels
    permissions:
      issues: write           # add / remove labels
      contents: read          # read repository data (not strictly needed here)

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # add in repo / org secrets
      GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}    # supplied automatically

    steps:
      - name: Build LLM prompt
        id: prompt
        run: |
          jq -n \
            --arg title "${{ github.event.issue.title }}" \
            --arg body  "${{ github.event.issue.body }}" \
            '{
               model:       "gpt-4.1-mini",          # or gpt-4o, gpt-3.5-turbo-1106, etc.
               temperature: 0.0,
               max_tokens:  64,
               messages: [
                 { role: "system",
                   content: "You are an assistant that assigns keywords to content. Return ONLY a raw JSON array (no back-ticks, no keys, no extra text)." },
                 { role: "user",
                   content: "Issue title:\n\($title)\n\nIssue body:\n\($body)" }
               ]
             }' > payload.json

      - name: Call OpenAI Chat Completion API
        id: llm
        run: |
          set -euo pipefail
      
          echo "### 📨 Request payload" >> "$GITHUB_STEP_SUMMARY"
          jq . payload.json | tee -a "$GITHUB_STEP_SUMMARY"
      
          # ── request ─────────────────────────────────────────────
          body_file=$(mktemp)
          status=$(curl -sS \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer $OPENAI_API_KEY" \
                    -d @payload.json \
                    -o "$body_file" \
                    -w '%{http_code}' \
                    https://api.openai.com/v1/chat/completions)
      
          body=$(cat "$body_file")
      
          echo "### 📬 HTTP status: $status" >> "$GITHUB_STEP_SUMMARY"
          echo "### 📦 Raw response"         >> "$GITHUB_STEP_SUMMARY"
          echo "$body" | jq . | tee -a "$GITHUB_STEP_SUMMARY"
      
          # ── extract labels (array or empty string) ─────────────
          echo "### 🔍 Debugging label extraction" >> "$GITHUB_STEP_SUMMARY"
          
          # Step 1: Extract content
          content=$(echo "$body" | jq -r '.choices[0].message.content // empty')
          echo "Step 1 - Raw content: $content" | tee -a "$GITHUB_STEP_SUMMARY"
          
          # Step 2: Clean markdown fences
          cleaned=$(echo "$content" | sed -e 's/```json//g' -e 's/```//g')
          echo "Step 2 - Cleaned: $cleaned" | tee -a "$GITHUB_STEP_SUMMARY"
          
          # Step 3: Parse as JSON array
          labels=$(echo "$cleaned" | jq -cM 'try . | select(type=="array")' || echo "")
          echo "Step 3 - Final labels: $labels" | tee -a "$GITHUB_STEP_SUMMARY"
      
          echo "labels=$labels" >> "$GITHUB_OUTPUT"

      - name: Apply labels returned by LLM
        if: ${{ steps.llm.outputs.labels != '' }}
        run: |
          echo '${{ steps.llm.outputs.labels }}' \
            | jq -r '.[]' \
            | xargs -r -I{} gh issue edit ${{ github.event.issue.number }} --add-label "{}"
