name: Auto-label new issues with LLM

on:
  issues:
    types: [opened]

jobs:
  labeler:
    runs-on: ubuntu-latest

    # Required so the job can write labels
    permissions:
      issues: write           # add / remove labels
      contents: read          # read repository data (not strictly needed here)

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}   # add in repo / org secrets
      GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}    # supplied automatically

    steps:
      - name: Build LLM prompt
        id: prompt
        run: |
          jq -n \
            --arg title "${{ github.event.issue.title }}" \
            --arg body  "${{ github.event.issue.body }}" \
            '{
               model:       "gpt-4.1-mini",          # or gpt-4o, gpt-3.5-turbo-1106, etc.
               temperature: 0.0,
               max_tokens:  64,
               messages: [
                 { role: "system",
                   content: "You are an assistant that assigns GitHub issue labels. Return ONLY a raw JSON array (no back-ticks, no keys, no extra text)." },
                 { role: "user",
                   content: "Issue title:\n\($title)\n\nIssue body:\n\($body)" }
               ]
             }' > payload.json

      - name: Call OpenAI Chat Completion API
        id: llm
        run: |
          set -euo pipefail
      
          echo "### ðŸ“¨ Request payload"       >> "$GITHUB_STEP_SUMMARY"
          jq . payload.json | tee -a "$GITHUB_STEP_SUMMARY"
      
          # â”€â”€ send the request and capture both body and HTTP status â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          read -r body http_status < <(
            curl -sS -w '\n%{http_code}' \
                 -H "Content-Type: application/json" \
                 -H "Authorization: Bearer $OPENAI_API_KEY" \
                 -d @payload.json \
                 https://api.openai.com/v1/chat/completions
          )
      
          echo "### ðŸ“¬ HTTP status: $http_status" >> "$GITHUB_STEP_SUMMARY"
          echo "### ðŸ“¦ Raw response"              >> "$GITHUB_STEP_SUMMARY"
          echo "$body" | jq . | tee -a "$GITHUB_STEP_SUMMARY"
      
          # â”€â”€ pull out the modelâ€™s answer and turn it into a JSON array â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          labels=$(
            echo "$body" \
              | jq -r '.choices[0].message.content // empty' \
              | sed -e 's/```json//g' -e 's/```//g' \
              | jq -cM 'try fromjson | select(type=="array")' || true
          )
      
          echo "labels=$labels" >> "$GITHUB_OUTPUT"

      - name: Apply labels returned by LLM
        if: ${{ steps.llm.outputs.labels != '' }}
        run: |
          echo "${{ steps.llm.outputs.labels }}" \
            | jq -r '.[]' \
            | xargs -I{} gh issue edit ${{ github.event.issue.number }} --add-label "{}"
